let alimentosData = [];

// Aguarda o evento de login bem-sucedido
document.addEventListener("loginSuccess", (event) => {
  const { usuario } = event.detail;
  console.log("Refeicoes.js recebendo usu√°rio:", usuario.email);

  // Renderiza tudo pela primeira vez
  renderizarTelaDeRefeicoes(usuario);

  // Adiciona os listeners para os bot√µes de editar, adicionar, etc.
  configurarListenersDeRefeicoes();
  renderizarConsumoDeAgua(usuario.consumo_agua); 
});

/**
 * Fun√ß√£o principal que orquestra a renderiza√ß√£o da tela de refei√ß√µes.
 * @param {object} usuario - O objeto completo do usu√°rio logado.
 */
function renderizarTelaDeRefeicoes(usuario) {
  if (!usuario || !usuario.refeicoes) {
    console.error("Dados de usu√°rio ou refei√ß√µes inv√°lidos para renderiza√ß√£o.");
    return;
  }
  renderizarResumoDiario(usuario.refeicoes);
  renderizarCardsDeRefeicoes(usuario.refeicoes);
}

/**
 * Calcula os totais de nutrientes e atualiza as barras de progresso.
 * @param {object} refeicoes - O objeto de refei√ß√µes do usu√°rio.
 */
function renderizarResumoDiario(refeicoes) {
  const metas = {
    calorias: 2000,
    proteinas: 120,
    carboidratos: 250,
    gorduras: 65,
  };
  const totais = { calorias: 0, proteinas: 0, carboidratos: 0, gorduras: 0 };

  for (const tipo in refeicoes) {
    const refeicao = refeicoes[tipo];
    // MUDAN√áA: A l√≥gica de "completo/pendente" deve vir do objeto de dados,
    // n√£o do DOM. Vamos assumir que todas contam por enquanto.
    // Para implementar o status, voc√™ adicionaria `if (refeicao.status === 'completo')`
    if (refeicao && refeicao.alimentos) {
      refeicao.alimentos.forEach((alimento) => {
        totais.calorias += parseFloat(alimento.calorias) || 0;
        totais.proteinas += parseFloat(alimento.proteinas) || 0;
        totais.carboidratos += parseFloat(alimento.carboidratos) || 0;
        totais.gorduras += parseFloat(alimento.gorduras) || 0;
      });
    }
  }

  document.getElementById("total-calorias").textContent = Math.round(
    totais.calorias
  );
  // ... (resto do c√≥digo para atualizar os elementos HTML) ...
  document.getElementById("total-proteinas").textContent = `${Math.round(
    totais.proteinas
  )}g`;
  document.getElementById("total-carboidratos").textContent = `${Math.round(
    totais.carboidratos
  )}g`;
  document.getElementById("total-gorduras").textContent = `${Math.round(
    totais.gorduras
  )}g`;

  document.getElementById("proteinas-atual").textContent = Math.round(
    totais.proteinas
  );
  document.getElementById("carboidratos-atual").textContent = Math.round(
    totais.carboidratos
  );
  document.getElementById("gorduras-atual").textContent = Math.round(
    totais.gorduras
  );

  const percCalorias = Math.round((totais.calorias / metas.calorias) * 100);
  const percProteinas = Math.round((totais.proteinas / metas.proteinas) * 100);
  const percCarboidratos = Math.round(
    (totais.carboidratos / metas.carboidratos) * 100
  );
  const percGorduras = Math.round((totais.gorduras / metas.gorduras) * 100);

  document.getElementById(
    "perc-calorias"
  ).textContent = `${percCalorias}% da meta`;
  document.getElementById(
    "perc-proteinas"
  ).textContent = `${percProteinas}% da meta`;
  document.getElementById(
    "perc-carboidratos"
  ).textContent = `${percCarboidratos}% da meta`;
  document.getElementById(
    "perc-gorduras"
  ).textContent = `${percGorduras}% da meta`;

  document.getElementById("barra-proteinas").style.width = `${Math.min(
    percProteinas,
    100
  )}%`;
  document.getElementById("barra-carboidratos").style.width = `${Math.min(
    percCarboidratos,
    100
  )}%`;
  document.getElementById("barra-gorduras").style.width = `${Math.min(
    percGorduras,
    100
  )}%`;
}

function renderizarCardsDeRefeicoes(refeicoes) {
    const titulosParaEncontrar = { cafe_da_manha: "Caf√© da Manh√£", almoco: "Almo√ßo", jantar: "Jantar" };
    for (const tipoRefeicao in titulosParaEncontrar) {
        const titulo = titulosParaEncontrar[tipoRefeicao];
        const refeicaoData = refeicoes[tipoRefeicao];
        const cardElement = document.querySelector(`[data-meal-title="${titulo}"]`);
        if (refeicaoData && cardElement) {
            const containerAlimentos = cardElement.closest('.slide-in').querySelector('[data-food-container]');
            containerAlimentos.innerHTML = '';
            let totalCalorias = 0;
            refeicaoData.alimentos.forEach((alimento, index) => {
                totalCalorias += parseFloat(alimento.calorias) || 0;
                const alimentoHTML = criarAlimentoHTML(alimento, tipoRefeicao, index);
                containerAlimentos.insertAdjacentHTML('beforeend', alimentoHTML);
            });
            const elementoCalorias = cardElement.closest('.slide-in').querySelector('[data-meal-time-calories]');
            if (elementoCalorias) {
                const horario = elementoCalorias.textContent.split('‚Ä¢')[0].trim();
                elementoCalorias.textContent = `${horario} ‚Ä¢ ${Math.round(totalCalorias)} kcal`;
            }
        }
    }
}

/**
 * Fun√ß√£o auxiliar que cria o HTML para um √∫nico alimento.
 * @param {object} alimento - O objeto do alimento.
 * @param {string} tipoRefeicao - Ex: 'cafe_da_manha'.
 * @param {number} index - A posi√ß√£o do alimento no array.
 * @returns {string} O HTML do elemento.
 */
function criarAlimentoHTML(alimento, tipoRefeicao, index) {
  // Adicionamos data-attributes para identificar o alimento e a a√ß√£o
  return `
        <div class="flex justify-between items-center" data-food-item>
            <button class="remover-alimento-btn hidden" data-action="remover-alimento" data-tipo-refeicao="${tipoRefeicao}" data-index="${index}">x</button>
            <div class="flex items-center flex-grow">
                <div class="w-10 h-10 bg-gray-100 rounded-lg mr-3 flex items-center justify-center">
                    <span class="text-xl">${alimento.icone || "üçΩÔ∏è"}</span>
                </div>
                <div>
                    <h5 class="font-medium">${alimento.nome}</h5>
                    <p class="text-xs text-gray-500">${alimento.porcao} ‚Ä¢ ${
    alimento.calorias
  } kcal</p>
                </div>
            </div>
            <div class="text-sm font-medium text-gray-700">${
              alimento.proteinas
            } P</div>
        </div>
    `;
}

// Esta fun√ß√£o centraliza a configura√ß√£o de todos os listeners da tela.

function configurarListenersDeRefeicoes() {
    const containerPrincipal = document.getElementById('meals-screen');

    // Listener de clique principal (delega√ß√£o de eventos)
    containerPrincipal.addEventListener('click', (e) => {
        // 'e.target' √© o elemento exato que foi clicado.
        // 'closest('button')' encontra o bot√£o pai mais pr√≥ximo.
        const target = e.target.closest('button'); 
        
        // Se o clique n√£o foi em um bot√£o, n√£o faz nada.
        if (!target) return;

        const action = target.dataset.action;

        if (action === 'remover-alimento') {
            const tipoRefeicao = target.dataset.tipoRefeicao;
            const index = parseInt(target.dataset.index, 10);
            dataService.removerAlimento(tipoRefeicao, index);
            renderizarTelaDeRefeicoes(dataService.getUsuarioLogado());
        }

        if (action === 'editar-refeicao') {
            const card = target.closest('.slide-in');
            card.classList.toggle('modo-edicao');
            const isEditing = card.classList.contains('modo-edicao');
            target.innerHTML = isEditing ? '<span class="mr-1">üíæ</span> Salvar' : '<span class="mr-1">‚úèÔ∏è</span> Editar';
            card.querySelectorAll('.remover-alimento-btn').forEach(btn => btn.classList.toggle('hidden', !isEditing));
        }

        // =======================================================
        // AQUI EST√Å A CORRE√á√ÉO
        // =======================================================
        if (action === 'adicionar-item') {
            // Usamos 'target' que √© a refer√™ncia correta ao bot√£o clicado.
            const containerAlimentos = target.closest('.slide-in').querySelector('[data-food-container]');
            const tipoRefeicao = target.id;

            // Previne adicionar m√∫ltiplos campos de busca
            if (containerAlimentos.querySelector('.food-search-item')) {
                return; 
            }

            const novoItemDeBusca = criarItemDeBuscaHTML(tipoRefeicao);
            containerAlimentos.appendChild(novoItemDeBusca);
            novoItemDeBusca.querySelector('input').focus();
        }
    });

    // Listener de digita√ß√£o (input) - Nenhuma mudan√ßa aqui, j√° est√° correto.
    containerPrincipal.addEventListener('input', (e) => {
        const input = e.target;
        if (input.dataset.action !== 'buscar-alimento') return;

        const termo = input.value;
        const sugestoesContainer = input.nextElementSibling;

        const resultados = dataService.buscarAlimentos(termo);
        renderizarSugestoes(resultados, sugestoesContainer, input);
    });
}

/**
 * Formata uma data no formato ISO para o padr√£o brasileiro (dd/mm/aaaa hh:mm).
 * @param {string} isoString - A data em formato ISO.
 * @returns {string} A data formatada.
 */
function formatarDataHora(isoString) {
  if (!isoString) return '';
  const data = new Date(isoString);
  const dia = String(data.getDate()).padStart(2, "0");
  const mes = String(data.getMonth() + 1).padStart(2, "0");
  const ano = data.getFullYear();
  const hora = String(data.getHours()).padStart(2, "0");
  const minuto = String(data.getMinutes()).padStart(2, "0");
  return `${dia}/${mes}/${ano} ${hora}:${minuto}`;
}


/**
 * Renderiza a tabela de consumo de √°gua e atualiza o resumo.
 * @param {Array} registrosAgua - O array `consumo_agua` do usu√°rio.
 */
function renderizarConsumoDeAgua(registrosAgua = []) {
    const tabelaBody = document.querySelector("#tabela-registros tbody");
    const totalConsumidoEl = document.querySelector("#home-screen .text-sm.text-green-600.font-medium"); // Seletor para o "1.2L / 2.5L"
    const barraProgressoEl = document.querySelector("#home-screen .bg-green-400");
    const percentualEl = document.querySelector("#home-screen .ml-1.font-medium.text-green-700");

    if (!tabelaBody || !totalConsumidoEl || !barraProgressoEl || !percentualEl) {
        console.error("Elementos da UI de consumo de √°gua n√£o encontrados.");
        return;
    }

    // 1. Limpa a tabela atual
    tabelaBody.innerHTML = '';

    // 2. Calcula o total consumido
    const totalConsumidoMl = registrosAgua.reduce((total, registro) => total + registro.quantidade, 0);
    const metaMl = 2500; // 2.5L

    // 3. Preenche a tabela com os novos dados
    registrosAgua.forEach(registro => {
        const linha = document.createElement("tr");
        linha.innerHTML = `
            <td>${registro.quantidade} ml</td>
            <td>${formatarDataHora(registro.data_e_hora)}</td>
        `;
        tabelaBody.appendChild(linha);
    });

    // 4. Atualiza o resumo (barra de progresso e texto)
    const totalConsumidoL = (totalConsumidoMl / 1000).toFixed(1);
    const metaL = (metaMl / 1000).toFixed(1);
    const percentual = Math.min(Math.round((totalConsumidoMl / metaMl) * 100), 100);

    totalConsumidoEl.textContent = `${totalConsumidoL}L / ${metaL}L`;
    barraProgressoEl.style.width = `${percentual}%`;
    percentualEl.textContent = `${percentual}%`;
}

/**
 * Cria o HTML para um novo item de alimento, com um campo de input para busca.
 * @param {string} tipoRefeicao - O tipo da refei√ß√£o onde o item ser√° adicionado.
 * @returns {HTMLElement} O elemento DOM do novo item.
 */
function criarItemDeBuscaHTML(tipoRefeicao) {
  const li = document.createElement("li");
  li.className = "food-search-item"; // Uma classe para identificar este item especial
  li.dataset.tipoRefeicao = tipoRefeicao;

  li.innerHTML = `
        <div class="flex items-center">
            <div class="w-10 h-10 bg-gray-200 rounded-lg mr-3 flex items-center justify-center">
                <span class="text-xl">üîç</span>
            </div>
            <div class="relative flex-grow">
                <input 
                    type="text" 
                    placeholder="Digite o nome do alimento..."
                    class="w-full font-medium bg-transparent outline-none border-b border-gray-300 focus:border-green-500"
                    data-action="buscar-alimento"
                />
                <div class="sugestoes-lista hidden absolute top-full left-0 w-full bg-white shadow-lg rounded-b-lg mt-1 z-50 max-h-48 overflow-y-auto">
                    <!-- As sugest√µes aparecer√£o aqui -->
                </div>
            </div>
        </div>
    `;
  return li;
}


// Listener para o bot√£o de registrar √°gua na tela inicial
const botaoRegistrarAgua = document.getElementById("register-water");
if (botaoRegistrarAgua) {
    botaoRegistrarAgua.addEventListener("click", function () {
        // Valor fixo de 250ml, pode ser alterado para pegar de um input se desejar.
        const quantidade = 250; 

        // 1. DELEGA a l√≥gica de salvar para o dataService.
        dataService.registrarConsumoAgua(quantidade);

        // 2. RE-RENDERIZA a UI de √°gua com os dados atualizados.
        const usuario = dataService.getUsuarioLogado();
        renderizarConsumoDeAgua(usuario.consumo_agua);

       
    });
}


/**
 * Renderiza a lista de sugest√µes de alimentos.
 * @param {Array} sugestoes - Array de objetos de alimento retornados pelo dataService.
 * @param {HTMLElement} container - A div onde as sugest√µes ser√£o inseridas.
 */
function renderizarSugestoes(sugestoes, container, inputElement) { // Adicionado inputElement
    container.innerHTML = ''; 

    if (sugestoes.length === 0) {
        container.classList.add('hidden');
        return;
    }

    container.classList.remove('hidden');

    sugestoes.forEach(alimento => {
        const item = document.createElement('div');
        item.className = 'p-2 hover:bg-gray-100 cursor-pointer border-b';
        item.innerHTML = 
        ` <div class="font-medium text-gray-800">${alimento.nome}</div>
            <div class="text-xs text-gray-500">${alimento.porcao} ‚Ä¢ ${alimento.calorias} kcal</div>
        `; // Seu c√≥digo HTML aqui

        item.addEventListener('click', () => {
            const itemDeBusca = container.closest('.food-search-item');
            const tipoRefeicao = itemDeBusca.dataset.tipoRefeicao;

            dataService.adicionarAlimento(tipoRefeicao, alimento);
            
            // Esconde a lista e limpa o input ap√≥s a sele√ß√£o
            container.classList.add('hidden');
            inputElement.value = '';

            renderizarTelaDeRefeicoes(dataService.getUsuarioLogado());
        });

        container.appendChild(item);
    });
}

/*
function adicionarAlimentoDoJSON(lista) {
  const novoItem = document.createElement("div");
  novoItem.className = "flex justify-between items-center";
  novoItem.innerHTML = `
        <div class="flex items-center">
            <div class="w-10 h-10 bg-gray-100 rounded-lg mr-3 flex items-center justify-center">
                <span class="text-gray-500">üçΩÔ∏è</span>
            </div>
            <div class="relative">
                <h5 class="font-medium item-name" contenteditable="true">Adicionar alimento</h5>
                <div class="sugestoes-lista hidden absolute top-full left-0 w-64 bg-white shadow-lg rounded-lg mt-1 z-50 max-h-48 overflow-y-auto"></div>
                <p class="text-xs text-gray-500">0g ‚Ä¢ 0 kcal</p>
            </div>
        </div>
        <div class="text-sm font-medium text-gray-700">0g P</div>
    `;

  lista.appendChild(novoItem);
  const nomeElement = novoItem.querySelector(".item-name");
  const sugestoesLista = novoItem.querySelector(".sugestoes-lista");

  // Evento para quando come√ßar a digitar
  nomeElement.addEventListener("focus", function () {
    if (this.textContent === "Adicionar alimento") {
      this.textContent = "";
    }
  });

  // Evento para mostrar sugest√µes enquanto digita
  nomeElement.addEventListener("input", function () {
    const texto = this.textContent.trim().toLowerCase();
    if (texto.length >= 1) {
      // Reduzido para 1 caractere
      const sugestoes = alimentosData.filter((alimento) =>
        alimento.nome.toLowerCase().includes(texto)
      );

      // Mostra sugest√µes mesmo que esteja vazio
      mostrarSugestoes(sugestoes, sugestoesLista, nomeElement, lista);
    } else {
      sugestoesLista.innerHTML = "";
      sugestoesLista.classList.add("hidden");
    }
  });

  // Esconde sugest√µes quando clicar fora
  document.addEventListener("click", function (e) {
    if (!nomeElement.contains(e.target) && !sugestoesLista.contains(e.target)) {
      sugestoesLista.classList.add("hidden");
    }
  });

  nomeElement.focus(); // Adiciona foco autom√°tico
  return novoItem;
}
  

function mostrarSugestoes(sugestoes, sugestoesLista, nomeElement, lista) {
  console.log("asdasda");

  sugestoesLista.innerHTML = "";
  sugestoesLista.classList.remove("hidden");

  // Se n√£o houver sugest√µes, mostra mensagem
  if (sugestoes.length === 0) {
    const semResultado = document.createElement("div");
    semResultado.className = "p-2 text-gray-500 text-center";
    semResultado.textContent = "Nenhum alimento encontrado";
    sugestoesLista.appendChild(semResultado);
    return;
  }

  // Mostra apenas a primeira sugest√£o encontrada
  const alimento = sugestoes[0]; // Pega apenas o primeiro alimento
  const sugestaoItem = document.createElement("div");
  sugestaoItem.className =
    "p-2 hover:bg-gray-100 cursor-pointer flex items-center";
  sugestaoItem.innerHTML = `
        <span class="mr-2">${alimento.icone || "üçΩÔ∏è"}</span>
        <div>
            <div class="font-medium">${alimento.nome}</div>
            <div class="text-xs text-gray-500">${alimento.porcao} ‚Ä¢ ${
    alimento.calorias
  } kcal</div>
        </div>
    `;

    // ACAO FINAL - INSERIR ALIMENTO
  sugestaoItem.addEventListener("click", () => {
    console.log("cliqe");
    const itemContainer = nomeElement.closest(".flex.justify-between");
    if (itemContainer) {
      const icon = itemContainer.querySelector(".text-gray-500");
      const info = nomeElement
        .closest(".relative")
        .querySelector("p.text-xs.text-gray-500");
      const protein = itemContainer.querySelector(".text-sm.font-medium");

      icon.textContent = alimento.icone || "üçΩÔ∏è";
      nomeElement.textContent = alimento.nome;
      info.textContent = `${alimento.porcao} ‚Ä¢ ${alimento.calorias} kcal`;
      protein.textContent = `${alimento.proteinas} P`;

      nomeElement.removeAttribute("contenteditable");
      sugestoesLista.classList.add("hidden");

      let modelo = {
        nome: alimento.nome,
        porcao: alimento.porcao,
        calorias: alimento.calorias,
        proteinas: alimento.proteinas,
        carboidratos: "0 g",
        gorduras: "0 g",
        icone: alimento.icone,
      };

      inserirRefeicao(modelo);
      
      atualizarRefeicoesNaTela();
      //  atualizarResumoDiario();
    }
  });

  sugestoesLista.appendChild(sugestaoItem);
}

function inserirRefeicao(alimento) {
  // Passo 1: Carregar os dados do localStorage
  let dadosString = localStorage.getItem("usuarios");
  const usuario_ = JSON.parse(localStorage.getItem('usuarioLogado'));

  let tipoDeRefeicao = tipoRefeicaoGlobal;

  if (!dadosString) {
    console.error("Nenhum dado encontrado no localStorage.");
    return;
  }
  let listaUsuarios = JSON.parse(dadosString);

  // Passo 2: Procurar o usu√°rio pelo ID
  const usuario = listaUsuarios.find((u) => u.id === usuario_.id);
  if (!usuario) {
    console.error("Usu√°rio n√£o encontrado.");
    return;
  }

  // Passo 3: Verificar se o campo de refei√ß√µes e o tipo de refei√ß√£o existem
  if (!usuario.refeicoes) {
    usuario.refeicoes = {};
  }

  // if (!usuario.refeicoes.tipoDeRefeicao) {
  //   console.error(`Refei√ß√£o "${tipoDeRefeicao}" n√£o encontrada.`);
  //   return;
  // }

  // Passo 4: Adicionar alimento
  usuario.refeicoes[tipoDeRefeicao].alimentos.push(alimento);

  // Passo 5: Salvar os dados de volta no localStorage
  localStorage.setItem("usuarios", JSON.stringify(listaUsuarios));

  console.log("Alimento adicionado com sucesso!");
}

// Fun√ß√£o auxiliar para buscar e atualizar alimento
function buscarEAtualizarAlimento(elemento, nomeAlimento, lista) {
  console.log("XXXX");

  const alimento = alimentosData.find((a) =>
    a.nome.toLowerCase().includes(nomeAlimento.toLowerCase())
  );

  if (alimento) {
    const container = elemento.closest(".flex.justify-between");
    const icon = container.querySelector(".text-gray-500");
    const info = container.querySelector(".text-xs.text-gray-500");
    const protein = container.querySelector(".text-sm.font-medium");

    icon.textContent = alimento.icone;
    elemento.textContent = alimento.nome;
    info.textContent = `${alimento.porcao} ‚Ä¢ ${alimento.calorias} kcal`;
    protein.textContent = `${alimento.proteinas} P`;

    elemento.removeAttribute("contenteditable");

    atualizarCaloriasRefeicao(lista.closest(".slide-in"));
    atualizarResumoDiario();
  } else {
    alert("Alimento n√£o encontrado!");
    elemento.textContent = "Adicionar alimento";
    elemento.focus();
  }
}

function tornarItensEditaveis(card) {
  const editBtn = card.querySelector(".edit-meal-btn");
  if (!editBtn) return;

  editBtn.addEventListener("click", function (e) {
    const items = card.querySelectorAll(
      ".space-y-3 h5, .space-y-3 p, .space-y-3 .text-sm"
    );
    const isEditing = items[0].getAttribute("contenteditable") === "true";

    items.forEach((item) => {
      item.setAttribute("contenteditable", !isEditing);
      item.classList.toggle("bg-yellow-50", !isEditing);
    });

    // Atualiza o texto do bot√£o
    this.innerHTML = !isEditing
      ? '<span class="mr-1">üíæ</span> Salvar'
      : '<span class="mr-1">‚úèÔ∏è</span> Editar';
  });
}

// Adiciona um listener para cada menu dropdown de status das refei√ß√µes
document.querySelectorAll("[data-meal-status]").forEach((seletor) => {
  seletor.addEventListener("change", () => {
    console.log("Status da refei√ß√£o alterado. Recalculando resumo di√°rio...");

    // Pega o usu√°rio logado para acessar suas refei√ß√µes
    const usuario = JSON.parse(localStorage.getItem("usuarioLogado"));

    if (usuario && usuario.refeicoes) {
      // Chama a fun√ß√£o de atualiza√ß√£o que est√° no escopo global (definida em login.js)
      atualizarResumoDiario(usuario.refeicoes);
    }
  });
});

// botoes rodape
document.getElementById("add-meal-btn").addEventListener("click", () => {
  const template = document.querySelector("#meal-template > div");
  const mealList = document.getElementById("meal-list");

  if (template && mealList) {
    const novoCard = template.cloneNode(true);
    novoCard.classList.add("slide-in");
    novoCard.style.animationDelay = "0s";

    // Adiciona hora atual
    const agora = new Date();
    const horaAtual = agora.getHours().toString().padStart(2, "0");
    const minutosAtuais = agora.getMinutes().toString().padStart(2, "0");
    const horaFormatada = `${horaAtual}:${minutosAtuais}`;

    // Atualiza o texto da refei√ß√£o com a hora atual
    const infoh = novoCard.querySelector("p.text-xs.text-gray-500");
    if (infoh) {
      infoh.textContent = `${horaFormatada} ‚Ä¢ 0 kcal`;
    }

    // Limpa os alimentos existentes
    const lista = novoCard.querySelector(".space-y-3");
    lista.innerHTML = "";

    // Adiciona um item de alimento edit√°vel
    const novoItem = adicionarAlimentoDoJSON(lista);

    // Ativar/Desativar edi√ß√£o da refei√ß√£o e seus itens
    tornarItensEditaveis(novoCard);

    // Adiciona funcionalidade ao bot√£o "Adicionar item"
    const addItemBtn = novoCard.querySelector(".add-meal-item-btn");
    addItemBtn.addEventListener("click", () => {
      adicionarAlimentoDoJSON(lista);
    });

    mealList.appendChild(novoCard);
  }
});


// Torna os bot√µes Editar e Adicionar item funcionais para todas as refei√ß√µes existentes
document.querySelectorAll(".meal-item, .slide-in").forEach((card) => {
  const editBtn = card.querySelector(".edit-meal-btn");
  const addItemBtn = card.querySelector(".add-meal-item-btn");
  // let tipo_refeicao = addItemBtn.id;

  const title = card.querySelector(
    "h4.font-medium[contenteditable], h4.font-medium"
  );
  const info = card.querySelector(
    "p.text-xs.text-gray-500[contenteditable], p.text-xs.text-gray-500"
  );

  if (editBtn && title && info) {
    editBtn.addEventListener("click", function (e) {
      const isEditing = title.getAttribute("contenteditable") === "true";
      title.setAttribute("contenteditable", !isEditing);
      info.setAttribute("contenteditable", !isEditing);

      title.classList.toggle("bg-yellow-50", !isEditing);
      info.classList.toggle("bg-yellow-50", !isEditing);

      // Muda bot√£o para "Salvar"
      editBtn.innerHTML = !isEditing
        ? '<span class="mr-1">üíæ</span> Salvar'
        : '<span class="mr-1">‚úèÔ∏è</span> Editar';
    });
  }
  if (addItemBtn) {
    addItemBtn.addEventListener("click", function () {
      const lista = card.querySelector(".space-y-3");
      if (lista) {
        adicionarAlimentoDoJSON(lista);
      }
    });
  }
});

// Aplica a fun√ß√£o para todos os cards de refei√ß√£o existentes
document.querySelectorAll(".slide-in").forEach((card) => {
  tornarItensEditaveis(card);
});
*/
